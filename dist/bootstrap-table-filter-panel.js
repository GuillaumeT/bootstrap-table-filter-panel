// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var BootstrapTable, _init, _initToolbar;

  $.extend($.fn.bootstrapTable.defaults, {
    filterPanel: false,
    filterPanelForm: void 0,
    filterPanelPosition: 'right',
    filterPanelInputPrefix: 'bt-filter-'
  });

  $.extend($.fn.bootstrapTable.defaults.icons, {
    filterPanelIcon: 'filter'
  });

  $.extend($.fn.bootstrapTable.locales, {
    formatFilterPanel: function() {
      return 'filtrer';
    }
  });

  $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales);

  BootstrapTable = $.fn.bootstrapTable.Constructor;

  _init = BootstrapTable.prototype.init;

  _initToolbar = BootstrapTable.prototype.initToolbar;

  BootstrapTable.prototype.initToolbar = function() {
    var html;
    _initToolbar.apply(this, Array.prototype.slice.apply(arguments));
    if (!this.options.filterPanel) {
      return;
    }
    html = [];
    html.push("<div class=\"columns columns-" + this.options.buttonsAlign + " btn-group pull-" + this.options.buttonsAlign + "\" role=\"group\">");
    html.push("<button class=\"btn btn-default " + (this.options.iconSize != null ? 'btn-' + this.options.iconSize : '') + "\" type=\"button\" name=\"filterPanel\" title=\"" + (this.options.formatFilterPanel()) + "\">");
    html.push("<i class=\"" + this.options.iconsPrefix + " " + this.options.iconsPrefix + "-" + this.options.icons.filterPanelIcon + "\"></i>");
    html.push('</button></div>');
    this.$toolbar.prepend(html.join(''));
    return this.$toolbar.find('button[name="filterPanel"]').off('click').on('click', (function(_this) {
      return function(evt) {
        return _this.toggleFilterPanel(evt);
      };
    })(this));
  };

  BootstrapTable.prototype.init = function() {
    _init.apply(this, Array.prototype.slice.apply(arguments));
    if (!this.options.filterPanel) {
      return;
    }
    return this.initFilterPanel();
  };

  BootstrapTable.prototype.initFilterPanelForm = function() {
    var $form, field, html, i, j, len, len1, ref, ref1, s, search, searchs;
    if (this.options.filterPanelForm != null) {
      $form = $(this.options.filterPanelForm);
    } else {
      html = ['<form method="get">'];
      ref = this.getColumns();
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        if (field.visible && field.searchable) {
          html.push('<div class="form-group">');
          html.push("<label>" + field.title + "</label>");
          html.push("<input class=\"form-control\" type=\"text\" name=\"" + this.options.filterInputPrefix + field.field + "\" value=\"\"/>");
          html.push('</div>');
        }
      }
      html.push('<button class="btn btn-default pull-right" type="submit">');
      html.push("<i class=\"" + this.options.iconsPrefix + " " + this.options.iconsPrefix + "-" + this.options.icons.filterPanelIcon + "\"></i> Filtrer");
      html.push('</button>');
      html.push('</form>');
      $form = $(html.join(''));
    }
    searchs = {};
    ref1 = location.search.slice(1).split('&');
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      search = ref1[j];
      if (search.startsWith(this.options.filterPanelInputPrefix)) {
        s = search.split('=');
        $form.find("[name=" + s[0] + "]").val(s[1]);
      }
    }
    return $form;
  };

  BootstrapTable.prototype.initFilterPanel = function() {
    var obj, order, padding;
    this.$container.css({
      'display': 'flex',
      'flex-flow': 'row wrap'
    });
    this.$filterPanel = $('<div class="fixed-table-panel"></div>').css({
      'display': 'None'
    });
    this.$filterPanel.append(this.initFilterPanelForm());
    this.$container.append(this.$filterPanel);
    switch (this.options.filterPanelPosition) {
      case 'right':
      case 'left':
        if (this.options.filterPanelPosition === 'left') {
          order = 1;
          padding = 'padding-right';
        } else {
          order = 0;
          padding = 'padding-left';
        }
        this.$toolbar.css({
          'flex': '1 0 100%'
        });
        this.$filterPanel.css((
          obj = {
            'flex': '1 1 30%'
          },
          obj["" + padding] = '1em',
          obj
        ));
        return this.$tableContainer.css({
          'flex': '1 1 70%',
          'order': order
        });
      case 'top':
      case 'bottom':
        if (this.options.filterPanelPosition === 'top') {
          order = 1;
        } else {
          order = 0;
        }
        this.$toolbar.css({
          'flex': '1 0 100%'
        });
        this.$filterPanel.css({
          'flex': '1 1 100%'
        });
        return this.$tableContainer.css({
          'flex': '1 1 100%',
          'order': order
        });
    }
  };

  BootstrapTable.prototype.toggleFilterPanel = function(evt) {
    this.$toolbar.find('button[name="filterPanel"]').toggleClass('active').blur();
    if (this.$filterPanel.css('display') === 'none') {
      this.$filterPanel.css('display', 'block');
    } else {
      this.$filterPanel.css('display', 'None');
    }
    return typeof this.resetHeader === "function" ? this.resetHeader() : void 0;
  };

}).call(this);

//# sourceMappingURL=bootstrap-table-filter-panel.js.map
